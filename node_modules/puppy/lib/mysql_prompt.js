(function() {
  var Configuration, OptionParser, _ref, fs, invoke, parser, usage;
  _ref = require("coffee-script/optparse");
  OptionParser = _ref.OptionParser;
  _ref = require("./puppy");
  Configuration = _ref.Configuration;
  invoke = _ref.invoke;
  fs = require("fs");
  parser = new OptionParser([["-n", "--name [NAME]", "database name"], ["-e", "--engine [mysql/mongodb]", "database engine"], ["-a", "--app [NAME]", "application name"]]);
  usage = function() {
    process.stdout.write(parser.help());
    return process.exit(1);
  };
  module.exports.command = function(argv) {
    var configuration, id, options;
    try {
      options = parser.parse(argv);
    } catch (e) {
      usage();
    }
    if (/^\d+$/.test(options.app)) {
      options.app = parseInt(options.app, 10);
    } else {
      id = /^t(\d+)$/.exec(options.app);
      if (!id) {
        usage();
      }
      options.app = parseInt(id[1], 10);
    }
    if (require("./location").server) {
      console.log("Local execution of mysql:prompt is not implemented.");
      return process.exit(1);
    } else {
      configuration = new Configuration();
      return configuration.applications(function(applications) {
        var _i, _len, _ref2, application, fd, localUser, tty;
        localUser = null;
        _ref2 = applications;
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          application = _ref2[_i];
          if (application.id === options.app) {
            localUser = application.localUsers[0];
            break;
          }
        }
        tty = false;
        for (fd = 0; fd < 2; fd++) {
          if (fs.fstatSync(0).isCharacterDevice()) {
            tty = true;
            break;
          }
        }
        return invoke("/usr/bin/ssh", [(tty ? "-t" : "-T"), "-q", "-l", ("u" + (localUser.id)), localUser.machine.hostname, "/puppy/bin/mysql_prompt"], argv);
      });
    }
  };
}).call(this);
