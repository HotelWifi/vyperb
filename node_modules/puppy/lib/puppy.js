(function() {
  var Configuration, _ref, exec, fs, invoke, path, spawn, sys;
  var __hasProp = Object.prototype.hasOwnProperty, __bind = function(func, context) {
    return function(){ return func.apply(context, arguments); };
  };
  fs = require("fs");
  sys = require("sys");
  path = require("path");
  _ref = require("child_process");
  spawn = _ref.spawn;
  exec = _ref.exec;
  Configuration = function() {
    var home;
    home = process.env["HOME"];
    try {
      fs.statSync("" + (home) + "/.puppy");
      this.global = JSON.parse(fs.readFileSync("" + (home) + "/.puppy/configuration.json"));
    } catch (e) {
      if (process.binding("net").ENOENT !== e.errno) {
        throw e;
      }
      this.global = {};
    }
    try {
      fs.statSync("./.puppy");
      this.local = JSON.parse(fs.readFileSync("./.puppy/configuration.json"));
    } catch (e) {
      if (process.binding("net").ENOENT !== e.errno) {
        throw e;
      }
      this.local = {};
    }
    this.global.server || (this.global.server = "portoroz.prettyrobots.com");
    this.dirty = {};
    return this;
  };
  Configuration.prototype.setGlobal = function(properties) {
    var _ref2, k, v;
    _ref2 = properties;
    for (k in _ref2) {
      if (!__hasProp.call(_ref2, k)) continue;
      v = _ref2[k];
      if (v === null) {
        delete this.global[k];
      } else {
        this.global[k] = v;
      }
    }
    return (this.dirty.global = true);
  };
  Configuration.prototype.abend = function(message) {
    process.stdout.write("ERROR: " + (message));
    return process.exit(1);
  };
  Configuration.prototype.save = function() {
    var pretty, stat;
    if (this.dirty.global) {
      pretty = JSON.stringify(this.global);
      try {
        stat = fs.statSync("" + (process.env["HOME"]) + "/.puppy");
        if (!stat.isDirectory()) {
          this.abend("" + (process.env["HOME"]) + "/.puppy is not a directory.");
        }
        return fs.writeFileSync("" + (process.env["HOME"]) + "/.puppy/configuration.json", pretty, "utf8");
      } catch (error) {
        if (process.binding("net").ENOENT !== error.errno) {
          throw error;
        }
        fs.mkdirSync("" + (process.env["HOME"]) + "/.puppy", 0755);
        return this.save();
      }
    }
  };
  Configuration.prototype.get = function(key) {
    return this.local[key] || this.global[key];
  };
  Configuration.prototype.home = function(callback) {
    var email, home, public, ssh;
    if (!(home = this.get("home"))) {
      if (!(email = this.get("email"))) {
        throw new Error("Email not configured.");
      }
      public = ("" + (__dirname) + "/../etc/public.pub");
      ssh = spawn("ssh", ["-T", "-i", public, "-l", "public", this.get("server")]);
      ssh.stdin.end(JSON.stringify(["/puppy/bin/account_home", email]));
      home = "";
      ssh.stdout.on("data", function(chunk) {
        return home += chunk.toString();
      });
      ssh.stderr.on("data", function(chunk) {
        return process.stdout.write(chunk.toString());
      });
      return ssh.on("exit", function(code) {
        if (code === 0) {
          return callback(home.substring(0, home.length - 1));
        } else {
          throw new Error("Unable to determine home for " + (email));
        }
      });
    } else {
      return callback(home);
    }
  };
  Configuration.prototype.directory = function(callback) {
    var home;
    home = process.env["HOME"];
    return fs.stat("" + (home) + "/.puppy", __bind(function(error, stat) {
      if (error) {
        if (process.binding("net").ENOENT === error.errno) {
          fs.mkdir("" + (home) + "/.puppy", 0755, __bind(function(error) {
            if (error) {
              throw error;
            }
            return this.directory(callback);
          }, this));
        } else {
          throw error;
        }
      }
      return callback();
    }, this));
  };
  Configuration.prototype.applications = function(callback) {
    return this.directory(__bind(function() {
      var home;
      try {
        home = process.env["HOME"];
        return callback(JSON.parse(fs.readFileSync("" + (home) + "/.puppy/applications.json", "utf8")));
      } catch (error) {
        if (process.binding("net").ENOENT === error.errno) {
          return this.fetchApplications(__bind(function(applications) {
            fs.writeFileSync("" + (home) + "/.puppy/applications.json", JSON.stringify(applications), "utf8");
            return this.applications(callback);
          }, this));
        } else {
          throw error;
        }
      }
    }, this));
  };
  Configuration.prototype.fetchApplications = function(callback) {
    return this.home(function(user) {
      var config, stderr, stdout;
      config = spawn("/usr/bin/ssh", ["-T", user, "/usr/bin/sudo", "-u", "delegate", "/puppy/bin/account_apps"]);
      stdout = "";
      stderr = "";
      config.stdout.on("data", function(chunk) {
        return stdout += chunk.toString();
      });
      config.stderr.on("data", function(chunk) {
        return stderr += chunk.toString();
      });
      return config.on("exit", function(code) {
        if (code === 0) {
          return callback(JSON.parse(stdout));
        } else {
          throw new Error("Unable to list applications.");
        }
      });
    });
  };
  module.exports.Configuration = Configuration;
  invoke = function(command, parameters, splat) {
    var _i, _len, _ref2, parameter, program;
    _ref2 = splat;
    for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
      parameter = _ref2[_i];
      parameters.push(parameter);
    }
    program = spawn(command, parameters, {
      customFds: [0, 1, 2]
    });
    return program.on("exit", function(code) {
      return process.exit(code);
    });
  };
  module.exports.invoke = invoke;
  module.exports.delegate = function(command, argv) {
    var configuration;
    if (require("./location").server) {
      return invoke("/usr/bin/sudo", ["-H", "-u", "delegate", command], argv);
    } else {
      configuration = new Configuration();
      return configuration.home(function(home) {
        return invoke("/usr/bin/ssh", ["-T", home, "/usr/bin/sudo", "-H", "-u", "delegate", command], argv);
      });
    }
  };
}).call(this);
